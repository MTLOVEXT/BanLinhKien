using CHBHTH.Areas.Admin.Repositories;
using CHBHTH.Models;
using System;
using System.IO;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;

namespace CHBHTH.Areas.Admin.Controllers
{
	public class SanPhamsController : Controller
	{
		private readonly ISanPhamRepositoryAdmin _sanPhamRepository;

		// Khởi tạo controller với repository
		public SanPhamsController(ISanPhamRepositoryAdmin sanPhamRepository)
		{
			_sanPhamRepository = sanPhamRepository;
		}

		// GET: SanPhams
		public ActionResult Index()
		{
			var sanPhams = _sanPhamRepository.GetAllSanPhams();
			var u = Session["use"] as CHBHTH.Models.TaiKhoan;
			if (u.PhanQuyen.TenQuyen == "Adminstrator")
			{
				return View(sanPhams.OrderByDescending(s => s.MaSP).ToList());
			}
			return RedirectPermanent("~/Home/Index");
		}

		// GET: SanPhams/Details/5
		public ActionResult Details(int? id)
		{
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
			SanPham sanPham = _sanPhamRepository.GetSanPhamById(id.Value);
			if (sanPham == null)
			{
				return HttpNotFound();
			}
			return View(sanPham);
		}

		// GET: SanPhams/Create
		public ActionResult Create()
		{
			// Fetch categories and suppliers for the dropdowns
			ViewBag.MaLoai = new SelectList(_sanPhamRepository.GetAllLoaiHangs(), "MaLoai", "TenLoai");
			ViewBag.MaNCC = new SelectList(_sanPhamRepository.GetAllNhaCungCaps(), "MaNCC", "TenNCC");
			return View();
		}

		// POST: SanPhams/Create
		[HttpPost]
		[ValidateAntiForgeryToken]
		public ActionResult Create([Bind(Include = "MaSP,TenSP,GiaBan,Soluong,MoTa,MaLoai,MaNCC,AnhSP")] SanPham sanPham)
		{
			if (ModelState.IsValid)
			{
				_sanPhamRepository.AddSanPham(sanPham);
				_sanPhamRepository.Save();
				return RedirectToAction("Index");
			}

			// Repopulate dropdowns if model state is invalid
			ViewBag.MaLoai = new SelectList(_sanPhamRepository.GetAllLoaiHangs(), "MaLoai", "TenLoai", sanPham.MaLoai);
			ViewBag.MaNCC = new SelectList(_sanPhamRepository.GetAllNhaCungCaps(), "MaNCC", "TenNCC", sanPham.MaNCC);
			return View(sanPham);
		}

		// GET: SanPhams/Edit/5
		public ActionResult Edit(int? id)
		{
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
			SanPham sanPham = _sanPhamRepository.GetSanPhamById(id.Value);
			if (sanPham == null)
			{
				return HttpNotFound();
			}

			// Fetch categories and suppliers for the dropdowns
			ViewBag.MaLoai = new SelectList(_sanPhamRepository.GetAllLoaiHangs(), "MaLoai", "TenLoai", sanPham.MaLoai);
			ViewBag.MaNCC = new SelectList(_sanPhamRepository.GetAllNhaCungCaps(), "MaNCC", "TenNCC", sanPham.MaNCC);

			return View(sanPham);
		}

		// POST: SanPhams/Edit/5
		[HttpPost]
		[ValidateAntiForgeryToken]
		public ActionResult Edit(SanPham sanPham, HttpPostedFileBase AnhSP)
		{
			if (ModelState.IsValid)
			{
				// Handle file upload
				if (AnhSP != null && AnhSP.ContentLength > 0)
				{
					// Lấy tên tệp từ ảnh và tạo tên tệp duy nhất để tránh trùng lặp
					string fileName = Path.GetFileName(AnhSP.FileName);
					string fileExtension = Path.GetExtension(fileName);
					string newFileName = Guid.NewGuid().ToString() + fileExtension;  // Tạo tên tệp mới từ GUID
					string filePath = Path.Combine(Server.MapPath("~/Content/assets/img/"), newFileName);

					// Lưu tệp ảnh vào thư mục server
					AnhSP.SaveAs(filePath);

					// Cập nhật đường dẫn ảnh trong đối tượng sản phẩm
					sanPham.AnhSP = "~/Content/assets/img/" + newFileName;  // Lưu đường dẫn tương đối của ảnh
				}

				// Cập nhật thông tin sản phẩm trong cơ sở dữ liệu
				_sanPhamRepository.UpdateSanPham(sanPham);
				_sanPhamRepository.Save();

				// Chuyển hướng về danh sách sản phẩm
				return RedirectToAction("Index");
			}

			// Nếu model không hợp lệ, giữ lại các dữ liệu để người dùng sửa
			ViewBag.LoaiHangs = new SelectList(_sanPhamRepository.GetAllLoaiHangs(), "MaLoai", "TenLoai", sanPham.MaLoai);
			ViewBag.NhaCungCaps = new SelectList(_sanPhamRepository.GetAllNhaCungCaps(), "MaNCC", "TenNCC", sanPham.MaNCC);
			return View(sanPham);
		}



		// GET: SanPhams/Delete/5
		public ActionResult Delete(int? id)
		{
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
			SanPham sanPham = _sanPhamRepository.GetSanPhamById(id.Value);
			if (sanPham == null)
			{
				return HttpNotFound();
			}
			return View(sanPham);
		}

		// POST: SanPhams/Delete/5
		[HttpPost, ActionName("Delete")]
		[ValidateAntiForgeryToken]
		public ActionResult DeleteConfirmed(int id)
		{
			_sanPhamRepository.DeleteSanPham(id);
			_sanPhamRepository.Save();
			return RedirectToAction("Index");
		}
	}
}
